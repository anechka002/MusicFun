import {Track} from '../../../Track.tsx';
import {type ChangeEvent, useRef, useState} from "react";
import s from '../../../TraksList.module.css'
import {
  useTracksQuery
} from "@/features-layer/tracks-slice/model-segment/useTracksQuery.tsx";

export const TracksList = () => {

  // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
  const [pageNumber, setPageNumber] = useState(1);

  const [pageSize, setPageSize] = useState(5);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ React Query
  const {isPending, isError, data: tracks, isFetching} = useTracksQuery({
    pageNumber,
    pageSize,
  })

  // –•—Ä–∞–Ω–∏—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ —Ç—Ä–µ–∫–∞
  const [currentTrackPlay, setCurrentTrackPlay] = useState<string | null>(null)

  // useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã <audio>, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –Ω–∞–ø—Ä—è–º—É—é
  const audioElementRef = useRef<Record<string, HTMLAudioElement | null>>({})
  // useRef –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–∫—É
  const selectedTrackRef = useRef<HTMLLIElement | null>(null)

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–∏ (–ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Loading..."
  if (isPending) {
    return <div>Loading...</div>
  }
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π
  if (isError) {
    return <div>Can't load tracks</div>
  }

  // üîä –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ç—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä–∞—Ç—å
  const handleTrackEnded = (id: string) => {
    // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    const endedIndex = tracks.data.findIndex((el) => el.id === id);
    if (endedIndex === -1) return; // –∑–∞—â–∏—Ç–∞

    // –°—á–∏—Ç–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const nextIndex = endedIndex + 1 < tracks.data.length ? endedIndex + 1 : -1;

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ
    if(nextIndex === -1) {
      setCurrentTrackPlay(null);
      return;
    }

    // –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    const nextTrack = tracks.data[nextIndex];
    if(!nextTrack) return;

    // —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫
    audioElementRef.current[id]?.pause();

    // –æ–±–Ω–æ–≤–ª—è–µ–º state
    setCurrentTrackPlay(nextTrack.id)

    // –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Play
    audioElementRef.current[nextTrack.id]?.play()
    // —Å–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–µ–º—É
    selectedTrackRef.current?.scrollIntoView({ behavior: "smooth", block: "center" });
  }

  // ‚ñ∂Ô∏è –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Play (—á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª)
  const handleTrackPlay = (id: string) => {
    // –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ ‚Üí —Å—Ç–∞–≤–∏–º –µ–≥–æ –Ω–∞ –ø–∞—É–∑—É
    if (currentTrackPlay && currentTrackPlay !== id) {
      audioElementRef.current[currentTrackPlay]?.pause();
    }
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    setCurrentTrackPlay(id);

    // —Å–∫—Ä–æ–ª–ª–∏–º –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–∫—É
    selectedTrackRef.current?.scrollIntoView({ behavior: "smooth", block: "center" });
  };

  // ‚è∏Ô∏è –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Pause
  const handleTrackPause = (id: string) => {
    //  –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫, —á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state
    if (currentTrackPlay === id) {
      setCurrentTrackPlay(null);
    }
  };

  // –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–æ–º–µ—Ä)
  const handlePageSelect = (pageNumber: number) => {
    setPageNumber(pageNumber)
  }

  // true ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª, –∏–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É)
  // const isPageContentUnactual = tracks.meta.page !== pageNumber
  const isPageContentUnactual = isFetching && !isPending

  // true ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
  const isPageUpdating = isFetching && !isPending

  const handlePageSizeChange = (e: ChangeEvent<HTMLSelectElement>) => {
    setPageSize(+e.currentTarget.value)
    setPageNumber(1)
  }

  return (
    <>
      <select value={pageSize} onChange={handlePageSizeChange}>
        <option value="5">5 items</option>
        <option value="10">10 items</option>
        <option value="20">20 items</option>
      </select>
      <Pagination total={tracks.meta.totalCount!}
                  skip={tracks.meta.pageSize * (pageNumber - 1)}
                  limit={tracks.meta.pageSize}
                  onPageSelect={handlePageSelect}
                  isPageUpdating={isPageUpdating}
      />
      <ul style={{ opacity: isPageContentUnactual ? '0.4' : '1' }}>
        {tracks.data.map((track) => (
          <li className={currentTrackPlay === track.id ? s.active : ''}
              key={track.id}
              ref={currentTrackPlay === track.id ? selectedTrackRef : null}
          >
            <Track
              onTrackPlay={() => handleTrackPlay(track.id)}
              onTrackPause={() => handleTrackPause(track.id)}
              onTrackEnded={handleTrackEnded}
              track={track}
              setRef={(el) => {
                if(el) audioElementRef.current[track.id] = el
                else delete audioElementRef.current[track.id];
              }}
            />
          </li>
        ))}
      </ul>
    </>
  );
};


type PaginationType = {
  limit: number;
  skip: number;
  total: number;
  onPageSelect: (pageNumber: number) => void;
  isPageUpdating: boolean;
}

function Pagination ({ limit, total, skip, onPageSelect, isPageUpdating }: PaginationType) {
  // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ–≥–æ)
  const totalPagesCount = Math.ceil(total / limit);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPage = skip / limit + 1

  return (
    <div style={{display: 'flex', flexDirection: 'row', gap: '5px'}}>
      {[...Array(totalPagesCount)].map((_, index) => {
        return (
          <button
            disabled={isPageUpdating}
            onClick={() => {
              if(currentPage !== index + 1) {
                onPageSelect(index + 1)
              }
            }}
            style={{
            cursor: 'pointer',
            border: currentPage === index + 1 ? '1px solid red' : 'none',
          }}
            key={index}>{index + 1}
          </button>)}
        )
      }
    </div>
  )
}